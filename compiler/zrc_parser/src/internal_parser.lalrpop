// DO NOT IMPORT DIRECTLY -- USE API EXPOSED BY MODULE parser INSTEAD
use super::ast::{expr::Expr, stmt::{Stmt, ArgumentDeclaration, LetDeclaration, Declaration}, ty::Type};
use super::lexer;
use super::box_arguments;
use lalrpop_util::ErrorRecovery;
use std::collections::HashMap;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, lexer::Tok, lexer::LexicalError>>);

CommaSeparated<T>: Vec<T> = {
    <e:T> <mut v:("," <T>)*> ","? => {
        let mut new = vec![e];
        new.append(&mut v);
        new
    }
};

CommaSeparatedWithoutTrailing<T>: Vec<T> = {
    <e:T> <mut v:("," <T>)*> => {
        let mut new = vec![e];
        new.append(&mut v);
        new
    }
}

pub Program: Vec<Declaration> = DeclarationList;

DeclarationList: Vec<Declaration> = Declaration*;

// See https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers for why this
// is necessary. The ClosedStmt rule REQUIRES that an 'else' clause is used, meaning that it will
// attach to the inner 'if' statement.
pub Stmt: Stmt = {
    <OpenStmt>,
    <ClosedStmt>
}

OpenStmt: Stmt = {
    "if" "(" <e:Expr> ")" <s:Stmt> => Stmt::IfStmt(e, Box::new(s), None),
    "if" "(" <a:Expr> ")" <b:ClosedStmt> "else" <c:OpenStmt> => 
        Stmt::IfStmt(a, Box::new(b), Some(Box::new(c))),
    "while" "(" <a:Expr> ")" <b:OpenStmt> => Stmt::WhileStmt(a, Box::new(b)),
    "for" "(" <a:Declaration> <b:Expr?> ";" <c:Expr?> ")" <d:OpenStmt> => Stmt::ForStmt {
        init: Some(Box::new(a)),
        cond: b,
        post: c,
        body: Box::new(d)
    },
    "for" "(" ";" <b:Expr?> ";" <c:Expr?> ")" <d:OpenStmt> => Stmt::ForStmt {
        init: None,
        cond: b,
        post: c,
        body: Box::new(d)
    },
};

ClosedStmt: Stmt = {
    <SimpleStmt>,
    "if" "(" <a:Expr> ")" <b:ClosedStmt> "else" <c:ClosedStmt> =>
        Stmt::IfStmt(a, Box::new(b), Some(Box::new(c))),
    "while" "(" <a:Expr> ")" <b:ClosedStmt> => Stmt::WhileStmt(a, Box::new(b)),
    "for" "(" <a:Declaration> <b:Expr?> ";" <c:Expr?> ")" <d:ClosedStmt> => Stmt::ForStmt {
        init: Some(Box::new(a)),
        cond: b,
        post: c,
        body: Box::new(d)
    },
    "for" "(" ";" <b:Expr?> ";" <c:Expr?> ")" <d:ClosedStmt> => Stmt::ForStmt {
        init: None,
        cond: b,
        post: c,
        body: Box::new(d)
    },
};

SimpleStmt: Stmt = {
    <Expr> ";" => Stmt::ExprStmt(<>),
    ";" => Stmt::EmptyStmt,
    "{" <l:StmtList?> "}" => Stmt::BlockStmt(l.unwrap_or(Vec::new())),
    <FlowStmt>,
    <Declaration> => Stmt::Declaration(<>),
};

Declaration: Declaration = {
    <LetDeclaration>,
    // FIXME: This might allow code like for (fn foo() {};;) {} to work. Do we want this?
    <FunctionDeclaration>,
    <StructDeclaration>,
};

FunctionDeclaration: Declaration = {
    "fn" <i:IDENTIFIER> "(" <a:ArgumentDeclarationList?> ")" <r:("->" <Type>)?> "{"
        <s:StmtList?>
    "}" => Declaration::FunctionDeclaration {
        name: i,
        parameters: a.unwrap_or(Vec::new()),
        return_type: r,
        body: Some(s.unwrap_or(Vec::new())),
    },
    "fn" <i:IDENTIFIER> "(" <a:ArgumentDeclarationList?> ")" <r:("->" <Type>)?> ";" => Declaration::FunctionDeclaration {
        name: i,
        parameters: a.unwrap_or(Vec::new()),
        return_type: r,
        body: None,
    }
};

StructDeclaration: Declaration = {
    "struct" <i:IDENTIFIER> "{" <l:CommaSeparated<(<IDENTIFIER> ":" <Type>)>?> "}" => Declaration::StructDeclaration {
        name: i,
        fields: l.unwrap_or(Vec::new()).into_iter().collect::<HashMap<_, _>>(),
    }
}

ArgumentDeclarationList = CommaSeparated<ArgumentDeclaration>;

ArgumentDeclaration: ArgumentDeclaration = {
    <i:IDENTIFIER> ":" <t:Type> => ArgumentDeclaration {
        name: i,
        ty: t
    }
};

LetDeclaration: Declaration = {
    "let" <l:CommaSeparatedWithoutTrailing<
        (<IDENTIFIER> <(":" <Type>)?> <("=" <Assignment>)?>)
    >> ";" => Declaration::DeclarationList(l.into_iter().map(|(i, t, v)| LetDeclaration {
        name: (i),
        ty: t,
        value: v,
    }).collect::<Vec<_>>()),
};

Type: Type = {
    <IDENTIFIER> => Type::Identifier(<>),
    "*" <Type> => Type::Ptr(Box::new(<>)),
    "struct" "{" <l:CommaSeparated<
        (<IDENTIFIER> ":" <Type>)>?> "}" => Type::Struct(l.unwrap_or(Vec::new()).into_iter().collect::<HashMap<_, _>>()),
}

FlowStmt: Stmt = {
    "continue" ";" => Stmt::ContinueStmt,
    "break" ";" => Stmt::BreakStmt,
    "return" <e:Expr?> ";" => Stmt::ReturnStmt(e),
};

StmtList: Vec<Stmt> = Stmt+;

pub Expr: Expr = Comma;

Comma: Expr = {
    <Comma> "," <Assignment> => box_arguments!(Expr::Comma, <>),
    <Assignment>
}

Assignment: Expr = {
    <Unary> "=" <Assignment> => box_arguments!(Expr::Assignment, <>),
    <Unary> "+=" <Assignment> => box_arguments!(Expr::AdditionAssignment, <>),
    <Unary> "-=" <Assignment> => box_arguments!(Expr::SubtractionAssignment, <>),
    <Unary> "*=" <Assignment> => box_arguments!(Expr::MultiplicationAssignment, <>),
    <Unary> "/=" <Assignment> => box_arguments!(Expr::DivisionAssignment, <>),
    <Unary> "%=" <Assignment> => box_arguments!(Expr::ModuloAssignment, <>),
    <Unary> "&=" <Assignment> => box_arguments!(Expr::BitwiseAndAssignment, <>),
    <Unary> "|=" <Assignment> => box_arguments!(Expr::BitwiseOrAssignment, <>),
    <Unary> "^=" <Assignment> => box_arguments!(Expr::BitwiseXorAssignment, <>),
    <Unary> "<<=" <Assignment> => box_arguments!(Expr::BitwiseLeftShiftAssignment, <>),
    <Unary> ">>=" <Assignment> => box_arguments!(Expr::BitwiseRightShiftAssignment, <>),
    <Ternary>
};

Ternary: Expr = {
    <Logical> "?" <Expr> ":" <Ternary> => box_arguments!(Expr::Ternary, <>),
    <Logical>
};

Logical: Expr = LogicalOr;
LogicalOr: Expr = {
    <LogicalOr> "||" <LogicalAnd> => box_arguments!(Expr::LogicalOr, <>),
    <LogicalAnd>,
};
LogicalAnd: Expr = {
    <LogicalAnd> "&&" <Equality> => box_arguments!(Expr::LogicalAnd, <>),
    <Bitwise>
};

Bitwise: Expr = BitwiseOr;
BitwiseOr: Expr = {
    <BitwiseOr> "|" <BitwiseXor> => box_arguments!(Expr::BitwiseOr, <>),
    <BitwiseXor>
};
BitwiseXor: Expr = {
    <BitwiseXor> "^" <BitwiseAnd> => box_arguments!(Expr::BitwiseXor, <>),
    <BitwiseAnd>,
};
BitwiseAnd: Expr = {
    <BitwiseAnd> "&" <Equality> => box_arguments!(Expr::BitwiseAnd, <>),
    <Equality>,
}

Equality: Expr = {
    <Equality> "==" <Comparison> => box_arguments!(Expr::Equals, <>),
    <Equality> "!=" <Comparison> => box_arguments!(Expr::NotEquals, <>),
    <Comparison>
};

Comparison: Expr = {
    <Comparison> ">" <BitShift> => box_arguments!(Expr::GreaterThan, <>),
    <Comparison> ">=" <BitShift> => box_arguments!(Expr::GreaterThanOrEqualTo, <>),
    <Comparison> "<" <BitShift> => box_arguments!(Expr::LessThan, <>),
    <Comparison> "<=" <BitShift> => box_arguments!(Expr::LessThanOrEqualTo, <>),
    <BitShift>
};

BitShift: Expr = {
    <BitShift> ">>" <Term> => box_arguments!(Expr::BitwiseRightShift, <>),
    <BitShift> "<<" <Term> => box_arguments!(Expr::BitwiseLeftShift, <>),
    <Term>
};

Term: Expr = {
    <Term> "+" <Factor> => box_arguments!(Expr::Addition, <>),
    <Term> "-" <Factor> => box_arguments!(Expr::Subtraction, <>),
    <Factor>
};

Factor: Expr = {
    <Factor> "/" <Cast> => box_arguments!(Expr::Division, <>),
    <Factor> "*" <Cast> => box_arguments!(Expr::Multiplication, <>),
    <Factor> "%" <Cast> => box_arguments!(Expr::Modulo, <>),
    <Cast>
};

Cast: Expr = {
    <e:Unary> "as" <t:Type> => Expr::Cast(Box::new(e), t),
    <Unary>,
}

Unary: Expr = {
    "!" <Unary> => box_arguments!(Expr::UnaryNot, <>),
    "-" <Unary> => box_arguments!(Expr::UnaryMinus, <>),
    "~" <Unary> => box_arguments!(Expr::UnaryBitwiseNot, <>),
    "&" <Unary> => box_arguments!(Expr::UnaryAddressOf, <>),
    "*" <Unary> => box_arguments!(Expr::UnaryDereference, <>),
    <Postfix>
};

Postfix: Expr = {
    <Postfix> "[" <Expr> "]" => box_arguments!(Expr::Index, <>),
    <l:Postfix> "." <r:IDENTIFIER> => Expr::Dot(Box::new(l), r),
    <l:Postfix> "->" <r:IDENTIFIER> => Expr::Arrow(Box::new(l), r),
    <i:Postfix> "(" <l:ArgumentList?> ")" => Expr::Call(Box::new(i), l.unwrap_or(Vec::new())),
    <Primary>
};

ArgumentList: Vec<Expr> = CommaSeparated<Assignment>;

Primary: Expr = {
    NUMBER => Expr::NumberLiteral(<>),
    STRING => Expr::StringLiteral(<>),
    IDENTIFIER => Expr::Identifier(<>),
    "true" => Expr::BooleanLiteral(true),
    "false" => Expr::BooleanLiteral(false),
    "(" <Expr> ")" => <>,
    ! => { errors.push(<>); Expr::Error }
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Star,
        "/" => lexer::Tok::Slash,
        "%" => lexer::Tok::Percent,

        "==" => lexer::Tok::EqEq,
        "!=" => lexer::Tok::NotEq,
        ">" => lexer::Tok::Greater,
        ">=" => lexer::Tok::GreaterEq,
        "<" => lexer::Tok::Less,
        "<=" => lexer::Tok::LessEq,

        "&&" => lexer::Tok::LogicalAnd,
        "||" => lexer::Tok::LogicalOr,
        "!" => lexer::Tok::LogicalNot,

        "&" => lexer::Tok::BitwiseAnd,
        "|" => lexer::Tok::BitwiseOr,
        "^" => lexer::Tok::BitwiseXor,
        "~" => lexer::Tok::BitwiseNot,
        "<<" => lexer::Tok::BitwiseLeftShift,
        ">>" => lexer::Tok::BitwiseRightShift,

        "=" => lexer::Tok::Assign,
        "+=" => lexer::Tok::PlusAssign,
        "-=" => lexer::Tok::MinusAssign,
        "*=" => lexer::Tok::StarAssign,
        "/=" => lexer::Tok::SlashAssign,
        "%=" => lexer::Tok::PercentAssign,
        "&=" => lexer::Tok::BitwiseAndAssign,
        "|=" => lexer::Tok::BitwiseOrAssign,
        "^=" => lexer::Tok::BitwiseXorAssign,
        "<<=" => lexer::Tok::BitwiseLeftShiftAssign,
        ">>=" => lexer::Tok::BitwiseRightShiftAssign,

        ";" => lexer::Tok::Semicolon,
        "," => lexer::Tok::Comma,
        "." => lexer::Tok::Dot,
        "?" => lexer::Tok::QuestionMark,
        ":" => lexer::Tok::Colon,

        "(" => lexer::Tok::LeftParen,
        ")" => lexer::Tok::RightParen,
        "{" => lexer::Tok::LeftBrace,
        "}" => lexer::Tok::RightBrace,
        "[" => lexer::Tok::LeftBracket,
        "]" => lexer::Tok::RightBracket,

        STRING => lexer::Tok::StringLiteral(<String>),
        NUMBER => lexer::Tok::NumberLiteral(<String>),
        IDENTIFIER => lexer::Tok::Identifier(<String>),

        "true" => lexer::Tok::True,
        "false" => lexer::Tok::False,
        "if" => lexer::Tok::If,
        "else" => lexer::Tok::Else,
        "while" => lexer::Tok::While,
        "for" => lexer::Tok::For,
        "break" => lexer::Tok::Break,
        "continue" => lexer::Tok::Continue,
        "return" => lexer::Tok::Return,
        "let" => lexer::Tok::Let,
        "fn" => lexer::Tok::Fn,
        "as" => lexer::Tok::As,
        "struct" => lexer::Tok::Struct,
        "->" => lexer::Tok::SmallArrow,
    }
}