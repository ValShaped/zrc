---
source: compiler/zrc_codegen/src/expr.rs
description: "union U { x: i32, y: i8 }\nfn take_i32(x: i32);\nfn take_i8(x: i8);\n\nfn test() {\n    let x: U;\n\n    // TEST: the pointer is cast and then read from as an i32\n    take_i32(x.x);\n\n    // TEST: the pointer is cast and then read from as an i8\n    take_i8(x.y);\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare void @take_i32(i32)

declare void @take_i8(i8)

define void @test() !dbg !3 {
entry:
  %let_x = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !8, metadata !DIExpression()), !dbg !15
  %load = load i32, ptr %let_x, align 4, !dbg !16
  call void @take_i32(i32 %load), !dbg !16
  %load1 = load i8, ptr %let_x, align 1, !dbg !17
  call void @take_i8(i8 %load1), !dbg !17
  ret void, !dbg !18
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 5, type: !4, scopeLine: 5, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{!8}
!8 = !DILocalVariable(name: "x", scope: !9, file: !2, line: 6, type: !11)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 5, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 5, column: 11)
!11 = !DICompositeType(tag: DW_TAG_union_type, name: "(union { x: i32, y: i8 })", scope: !2, file: !2, elements: !12)
!12 = !{!13, !14}
!13 = !DIBasicType(name: "i32")
!14 = !DIBasicType(name: "i8")
!15 = !DILocation(line: 6, column: 9, scope: !9)
!16 = !DILocation(line: 9, column: 14, scope: !9)
!17 = !DILocation(line: 12, column: 13, scope: !9)
!18 = !DILocation(line: 13, column: 1, scope: !9)

