---
source: compiler/zrc_codegen/src/expr.rs
description: "fn f();\nfn g() -> i32;\n\nfn test() -> i32 {\n    // TEST: f() is run, g() is run and used as the return value\n    return f(), g();\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare void @f()

declare i32 @g()

define i32 @test() {
entry:
  call void @f()
  %call = call i32 @g()
  ret i32 %call
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "--fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")

