---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn get_bool() -> bool;\n\nfn test() {\n    // TEST: properly produces a conditional break over the call result\n    // and both code paths return (diverge). there should be no %end bb.\n    if (get_bool()) return;\n    else return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare i1 @get_bool()

define {} @test() !dbg !3 {
entry:
  %call = call i1 @get_bool(), !dbg !8
  br i1 %call, label %then, label %then_else, !dbg !8

then:                                             ; preds = %entry
  ret {} zeroinitializer, !dbg !11

then_else:                                        ; preds = %entry
  ret {} zeroinitializer, !dbg !13
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 3, type: !4, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "(struct {  })", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !DILocation(line: 6, column: 9, scope: !9)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 3, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 3, column: 11)
!11 = !DILocation(line: 6, column: 21, scope: !12)
!12 = distinct !DILexicalBlock(scope: !9, file: !2, line: 6, column: 21)
!13 = !DILocation(line: 7, column: 10, scope: !14)
!14 = distinct !DILexicalBlock(scope: !9, file: !2, line: 7, column: 10)
