---
source: compiler/zrc_codegen/src/expr.rs
description: "fn take_int(x: i32);\n\nfn test() {\n    let x: *i32;\n\n    // TEST: `x` is *i32, so %let_x is a **i32 (ptr to the stack).\n    // %let_x needs to be GEP'd into and the value `i32` at idx 4 must be loaded.\n    take_int(x[4 as usize]);\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare {} @take_int(i32)

define {} @test() !dbg !3 {
entry:
  %let_x = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !9, metadata !DIExpression()), !dbg !14
  %load = load ptr, ptr %let_x, align 8, !dbg !15
  %gep = getelementptr i32, ptr %load, i64 4, !dbg !16
  %load1 = load i32, ptr %gep, align 4, !dbg !16
  %call = call {} @take_int(i32 %load1), !dbg !16
  ret {} zeroinitializer, !dbg !17
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 3, type: !4, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !8)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "(struct {})", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !{!9}
!9 = !DILocalVariable(name: "x", scope: !10, file: !2, line: 4, type: !12)
!10 = distinct !DILexicalBlock(scope: !11, file: !2, line: 3, column: 11)
!11 = distinct !DILexicalBlock(scope: !3, file: !2, line: 3, column: 11)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "\22i32\22", baseType: !13, dwarfAddressSpace: 0)
!13 = !DIBasicType(name: "i32")
!14 = !DILocation(line: 4, column: 9, scope: !10)
!15 = !DILocation(line: 8, column: 14, scope: !10)
!16 = !DILocation(line: 8, column: 16, scope: !10)
!17 = !DILocation(line: 9, column: 1, scope: !10)
