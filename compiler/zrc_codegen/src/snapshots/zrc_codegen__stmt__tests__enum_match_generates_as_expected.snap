---
source: compiler/zrc_codegen/src/stmt.rs
description: "enum VarInt {\n    I32: i32,\n    I64: i64,\n}\n\nfn f() -> VarInt;\nfn fi32(x: i32);\nfn fi64(x: i64);\n\nfn main() {\n    let vi = f();\n\n    match (vi) {\n        I32: x => fi32(x);\n        I64: y => fi64(y);\n    }\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare { i64, i64 } @f()

declare {} @fi32(i32)

declare {} @fi64(i64)

define {} @main() !dbg !3 {
entry:
  %let_y = alloca i64, align 8
  %let_x = alloca i32, align 4
  %let_vi = alloca { i64, i64 }, align 8
  call void @llvm.dbg.declare(metadata ptr %let_vi, metadata !9, metadata !DIExpression()), !dbg !26
  %call = call { i64, i64 } @f(), !dbg !27
  store { i64, i64 } %call, ptr %let_vi, align 4, !dbg !26
  %gep = getelementptr inbounds { i64, i64 }, ptr %let_vi, i32 0, i32 0, !dbg !28
  %load = load i64, ptr %gep, align 4, !dbg !28
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !21, metadata !DIExpression()), !dbg !29
  call void @llvm.dbg.declare(metadata ptr %let_y, metadata !24, metadata !DIExpression()), !dbg !30
  switch i64 %load, label %default [
    i64 0, label %case
    i64 1, label %case1
  ], !dbg !31

default:                                          ; preds = %entry
  unreachable, !dbg !32

post:                                             ; preds = %case1, %case
  ret {} zeroinitializer, !dbg !34

case:                                             ; preds = %entry
  %gep2 = getelementptr inbounds { i64, i64 }, ptr %let_vi, i32 0, i32 1, !dbg !35
  %load3 = load i32, ptr %gep2, align 4, !dbg !35
  store i32 %load3, ptr %let_x, align 4, !dbg !29
  %load4 = load i32, ptr %let_x, align 4, !dbg !36
  %call5 = call {} @fi32(i32 %load4), !dbg !36
  br label %post, !dbg !36

case1:                                            ; preds = %entry
  %gep6 = getelementptr inbounds { i64, i64 }, ptr %let_vi, i32 0, i32 1, !dbg !37
  %load7 = load i64, ptr %gep6, align 4, !dbg !37
  store i64 %load7, ptr %let_y, align 4, !dbg !30
  %load8 = load i64, ptr %let_y, align 4, !dbg !38
  %call9 = call {} @fi64(i64 %load8), !dbg !38
  br label %post, !dbg !38
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !2, line: 10, type: !4, scopeLine: 10, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !8)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct {}", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !{!9, !21, !24}
!9 = !DILocalVariable(name: "vi", scope: !10, file: !2, line: 11, type: !12)
!10 = distinct !DILexicalBlock(scope: !11, file: !2, line: 10, column: 11)
!11 = distinct !DILexicalBlock(scope: !3, file: !2, line: 10, column: 11)
!12 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct { __discriminant__: usize, __value__: union { I32: i32, I64: i64 } }", scope: !2, file: !2, elements: !13)
!13 = !{!14, !16}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "__discriminant__", scope: !2, file: !2, baseType: !15)
!15 = !DIBasicType(name: "usize")
!16 = !DIDerivedType(tag: DW_TAG_member, name: "__value__", scope: !2, file: !2, baseType: !17)
!17 = !DICompositeType(tag: DW_TAG_union_type, name: "union { I32: i32, I64: i64 }", scope: !2, file: !2, elements: !18)
!18 = !{!19, !20}
!19 = !DIBasicType(name: "i32")
!20 = !DIBasicType(name: "i64")
!21 = !DILocalVariable(name: "x", scope: !22, file: !2, line: 14, type: !19)
!22 = distinct !DILexicalBlock(scope: !23, file: !2, line: 13, column: 5)
!23 = distinct !DILexicalBlock(scope: !10, file: !2, line: 13, column: 5)
!24 = !DILocalVariable(name: "y", scope: !25, file: !2, line: 15, type: !20)
!25 = distinct !DILexicalBlock(scope: !23, file: !2, line: 13, column: 5)
!26 = !DILocation(line: 11, column: 9, scope: !10)
!27 = !DILocation(line: 11, column: 14, scope: !10)
!28 = !DILocation(line: 13, column: 12, scope: !23)
!29 = !DILocation(line: 14, column: 9, scope: !22)
!30 = !DILocation(line: 15, column: 9, scope: !25)
!31 = !DILocation(line: 15, column: 9, scope: !23)
!32 = !DILocation(line: 13, column: 5, scope: !33)
!33 = distinct !DILexicalBlock(scope: !23, file: !2, line: 13, column: 5)
!34 = !DILocation(line: 16, column: 5, scope: !23)
!35 = !DILocation(line: 13, column: 12, scope: !22)
!36 = !DILocation(line: 14, column: 24, scope: !22)
!37 = !DILocation(line: 13, column: 12, scope: !25)
!38 = !DILocation(line: 15, column: 24, scope: !25)
