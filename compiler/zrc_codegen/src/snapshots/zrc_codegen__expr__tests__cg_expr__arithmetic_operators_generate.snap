---
source: compiler/zrc_codegen/src/expr.rs
description: "fn get_int() -> i32;\nfn get_uint() -> u32;\n\nfn test() {\n    let sx = get_int();\n    let sy = get_int();\n    let ux = get_uint();\n    let uy = get_uint();\n\n    // TEST: should create an `add i32` instruction\n    let s_add = sx + sy;\n    let u_add = ux + uy;\n\n    // TEST: should create a `sub i32` instruction\n    let s_sub = sx - sy;\n    let u_sub = ux - uy;\n\n    // TEST: should create a `mul i32` instruction\n    let s_mul = sx * sy;\n    let u_mul = ux * uy;\n\n    // TEST: should create a `sdiv i32` instruction\n    let s_div = sx / sy;\n    // TEST: should create a `udiv i32` instruction\n    let u_div = ux / uy;\n\n    // TEST: should create a `srem i32` instruction\n    let s_rem = sx % sy;\n    // TEST: should create a `urem i32` instruction\n    let u_rem = ux % uy;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare i32 @get_int()

declare i32 @get_uint()

define void @test() !dbg !3 {
entry:
  %let_u_rem = alloca i32, align 4
  %let_s_rem = alloca i32, align 4
  %let_u_div = alloca i32, align 4
  %let_s_div = alloca i32, align 4
  %let_u_mul = alloca i32, align 4
  %let_s_mul = alloca i32, align 4
  %let_u_sub = alloca i32, align 4
  %let_s_sub = alloca i32, align 4
  %let_u_add = alloca i32, align 4
  %let_s_add = alloca i32, align 4
  %let_uy = alloca i32, align 4
  %let_ux = alloca i32, align 4
  %let_sy = alloca i32, align 4
  %let_sx = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %let_sx, metadata !8, metadata !DIExpression()), !dbg !26
  %call = call i32 @get_int(), !dbg !27
  store i32 %call, ptr %let_sx, align 4, !dbg !26
  call void @llvm.dbg.declare(metadata ptr %let_sy, metadata !12, metadata !DIExpression()), !dbg !28
  %call1 = call i32 @get_int(), !dbg !29
  store i32 %call1, ptr %let_sy, align 4, !dbg !28
  call void @llvm.dbg.declare(metadata ptr %let_ux, metadata !13, metadata !DIExpression()), !dbg !30
  %call2 = call i32 @get_uint(), !dbg !31
  store i32 %call2, ptr %let_ux, align 4, !dbg !30
  call void @llvm.dbg.declare(metadata ptr %let_uy, metadata !15, metadata !DIExpression()), !dbg !32
  %call3 = call i32 @get_uint(), !dbg !33
  store i32 %call3, ptr %let_uy, align 4, !dbg !32
  call void @llvm.dbg.declare(metadata ptr %let_s_add, metadata !16, metadata !DIExpression()), !dbg !34
  %load = load i32, ptr %let_sx, align 4, !dbg !35
  %load4 = load i32, ptr %let_sy, align 4, !dbg !36
  %add = add i32 %load, %load4, !dbg !36
  store i32 %add, ptr %let_s_add, align 4, !dbg !34
  call void @llvm.dbg.declare(metadata ptr %let_u_add, metadata !17, metadata !DIExpression()), !dbg !37
  %load5 = load i32, ptr %let_ux, align 4, !dbg !38
  %load6 = load i32, ptr %let_uy, align 4, !dbg !39
  %add7 = add i32 %load5, %load6, !dbg !39
  store i32 %add7, ptr %let_u_add, align 4, !dbg !37
  call void @llvm.dbg.declare(metadata ptr %let_s_sub, metadata !18, metadata !DIExpression()), !dbg !40
  %load8 = load i32, ptr %let_sx, align 4, !dbg !41
  %load9 = load i32, ptr %let_sy, align 4, !dbg !42
  %sub = sub i32 %load8, %load9, !dbg !42
  store i32 %sub, ptr %let_s_sub, align 4, !dbg !40
  call void @llvm.dbg.declare(metadata ptr %let_u_sub, metadata !19, metadata !DIExpression()), !dbg !43
  %load10 = load i32, ptr %let_ux, align 4, !dbg !44
  %load11 = load i32, ptr %let_uy, align 4, !dbg !45
  %sub12 = sub i32 %load10, %load11, !dbg !45
  store i32 %sub12, ptr %let_u_sub, align 4, !dbg !43
  call void @llvm.dbg.declare(metadata ptr %let_s_mul, metadata !20, metadata !DIExpression()), !dbg !46
  %load13 = load i32, ptr %let_sx, align 4, !dbg !47
  %load14 = load i32, ptr %let_sy, align 4, !dbg !48
  %mul = mul i32 %load13, %load14, !dbg !48
  store i32 %mul, ptr %let_s_mul, align 4, !dbg !46
  call void @llvm.dbg.declare(metadata ptr %let_u_mul, metadata !21, metadata !DIExpression()), !dbg !49
  %load15 = load i32, ptr %let_ux, align 4, !dbg !50
  %load16 = load i32, ptr %let_uy, align 4, !dbg !51
  %mul17 = mul i32 %load15, %load16, !dbg !51
  store i32 %mul17, ptr %let_u_mul, align 4, !dbg !49
  call void @llvm.dbg.declare(metadata ptr %let_s_div, metadata !22, metadata !DIExpression()), !dbg !52
  %load18 = load i32, ptr %let_sx, align 4, !dbg !53
  %load19 = load i32, ptr %let_sy, align 4, !dbg !54
  %div = sdiv i32 %load18, %load19, !dbg !54
  store i32 %div, ptr %let_s_div, align 4, !dbg !52
  call void @llvm.dbg.declare(metadata ptr %let_u_div, metadata !23, metadata !DIExpression()), !dbg !55
  %load20 = load i32, ptr %let_ux, align 4, !dbg !56
  %load21 = load i32, ptr %let_uy, align 4, !dbg !57
  %div22 = udiv i32 %load20, %load21, !dbg !57
  store i32 %div22, ptr %let_u_div, align 4, !dbg !55
  call void @llvm.dbg.declare(metadata ptr %let_s_rem, metadata !24, metadata !DIExpression()), !dbg !58
  %load23 = load i32, ptr %let_sx, align 4, !dbg !59
  %load24 = load i32, ptr %let_sy, align 4, !dbg !60
  %rem = srem i32 %load23, %load24, !dbg !60
  store i32 %rem, ptr %let_s_rem, align 4, !dbg !58
  call void @llvm.dbg.declare(metadata ptr %let_u_rem, metadata !25, metadata !DIExpression()), !dbg !61
  %load25 = load i32, ptr %let_ux, align 4, !dbg !62
  %load26 = load i32, ptr %let_uy, align 4, !dbg !63
  %rem27 = urem i32 %load25, %load26, !dbg !63
  store i32 %rem27, ptr %let_u_rem, align 4, !dbg !61
  ret void, !dbg !64
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 4, type: !4, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{!8, !12, !13, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!8 = !DILocalVariable(name: "sx", scope: !9, file: !2, line: 5, type: !11)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 4, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 4, column: 11)
!11 = !DIBasicType(name: "i32")
!12 = !DILocalVariable(name: "sy", scope: !9, file: !2, line: 6, type: !11)
!13 = !DILocalVariable(name: "ux", scope: !9, file: !2, line: 7, type: !14)
!14 = !DIBasicType(name: "u32")
!15 = !DILocalVariable(name: "uy", scope: !9, file: !2, line: 8, type: !14)
!16 = !DILocalVariable(name: "s_add", scope: !9, file: !2, line: 11, type: !11)
!17 = !DILocalVariable(name: "u_add", scope: !9, file: !2, line: 12, type: !14)
!18 = !DILocalVariable(name: "s_sub", scope: !9, file: !2, line: 15, type: !11)
!19 = !DILocalVariable(name: "u_sub", scope: !9, file: !2, line: 16, type: !14)
!20 = !DILocalVariable(name: "s_mul", scope: !9, file: !2, line: 19, type: !11)
!21 = !DILocalVariable(name: "u_mul", scope: !9, file: !2, line: 20, type: !14)
!22 = !DILocalVariable(name: "s_div", scope: !9, file: !2, line: 23, type: !11)
!23 = !DILocalVariable(name: "u_div", scope: !9, file: !2, line: 25, type: !14)
!24 = !DILocalVariable(name: "s_rem", scope: !9, file: !2, line: 28, type: !11)
!25 = !DILocalVariable(name: "u_rem", scope: !9, file: !2, line: 30, type: !14)
!26 = !DILocation(line: 5, column: 9, scope: !9)
!27 = !DILocation(line: 5, column: 14, scope: !9)
!28 = !DILocation(line: 6, column: 9, scope: !9)
!29 = !DILocation(line: 6, column: 14, scope: !9)
!30 = !DILocation(line: 7, column: 9, scope: !9)
!31 = !DILocation(line: 7, column: 14, scope: !9)
!32 = !DILocation(line: 8, column: 9, scope: !9)
!33 = !DILocation(line: 8, column: 14, scope: !9)
!34 = !DILocation(line: 11, column: 9, scope: !9)
!35 = !DILocation(line: 11, column: 17, scope: !9)
!36 = !DILocation(line: 11, column: 22, scope: !9)
!37 = !DILocation(line: 12, column: 9, scope: !9)
!38 = !DILocation(line: 12, column: 17, scope: !9)
!39 = !DILocation(line: 12, column: 22, scope: !9)
!40 = !DILocation(line: 15, column: 9, scope: !9)
!41 = !DILocation(line: 15, column: 17, scope: !9)
!42 = !DILocation(line: 15, column: 22, scope: !9)
!43 = !DILocation(line: 16, column: 9, scope: !9)
!44 = !DILocation(line: 16, column: 17, scope: !9)
!45 = !DILocation(line: 16, column: 22, scope: !9)
!46 = !DILocation(line: 19, column: 9, scope: !9)
!47 = !DILocation(line: 19, column: 17, scope: !9)
!48 = !DILocation(line: 19, column: 22, scope: !9)
!49 = !DILocation(line: 20, column: 9, scope: !9)
!50 = !DILocation(line: 20, column: 17, scope: !9)
!51 = !DILocation(line: 20, column: 22, scope: !9)
!52 = !DILocation(line: 23, column: 9, scope: !9)
!53 = !DILocation(line: 23, column: 17, scope: !9)
!54 = !DILocation(line: 23, column: 22, scope: !9)
!55 = !DILocation(line: 25, column: 9, scope: !9)
!56 = !DILocation(line: 25, column: 17, scope: !9)
!57 = !DILocation(line: 25, column: 22, scope: !9)
!58 = !DILocation(line: 28, column: 9, scope: !9)
!59 = !DILocation(line: 28, column: 17, scope: !9)
!60 = !DILocation(line: 28, column: 22, scope: !9)
!61 = !DILocation(line: 30, column: 9, scope: !9)
!62 = !DILocation(line: 30, column: 17, scope: !9)
!63 = !DILocation(line: 30, column: 22, scope: !9)
!64 = !DILocation(line: 31, column: 1, scope: !9)

