---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn get_bool() -> bool;\nfn when_true();\nfn when_false_a();\nfn when_false_b();\nfn when_default(x: i32);\nfn post();\n\n\nfn test() {\n    // TEST: the proper `switch` structure is created\n    switch (get_bool()) {\n        true => when_true();\n        false => {\n            when_false_a();\n            when_false_b();\n        }\n        default => {\n            let x = 2 + 2;\n            when_default(x);\n        }\n    }\n    post();\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare i1 @get_bool()

declare {} @when_true()

declare {} @when_false_a()

declare {} @when_false_b()

declare {} @when_default(i32)

declare {} @post()

define {} @test() !dbg !3 {
entry:
  %let_x = alloca i32, align 4, !dbg !14
  %call = call i1 @get_bool(), !dbg !14
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !9, metadata !DIExpression()), !dbg !15
  switch i1 %call, label %default [
    i1 true, label %case
    i1 false, label %case1
  ], !dbg !16

default:                                          ; preds = %entry
  store i32 4, ptr %let_x, align 4, !dbg !15
  %load = load i32, ptr %let_x, align 4, !dbg !17
  %call2 = call {} @when_default(i32 %load), !dbg !17
  br label %post, !dbg !17

post:                                             ; preds = %case1, %case, %default
  %call6 = call {} @post(), !dbg !18
  ret {} zeroinitializer, !dbg !19

case:                                             ; preds = %entry
  %call3 = call {} @when_true(), !dbg !20
  br label %post, !dbg !20

case1:                                            ; preds = %entry
  %call4 = call {} @when_false_a(), !dbg !22
  %call5 = call {} @when_false_b(), !dbg !24
  br label %post, !dbg !24
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 9, type: !4, scopeLine: 9, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !8)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct {}", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !{!9}
!9 = !DILocalVariable(name: "x", scope: !10, file: !2, line: 18, type: !13)
!10 = distinct !DILexicalBlock(scope: !11, file: !2, line: 11, column: 5)
!11 = distinct !DILexicalBlock(scope: !12, file: !2, line: 9, column: 11)
!12 = distinct !DILexicalBlock(scope: !3, file: !2, line: 9, column: 11)
!13 = !DIBasicType(name: "i32")
!14 = !DILocation(line: 11, column: 13, scope: !11)
!15 = !DILocation(line: 18, column: 17, scope: !10)
!16 = !DILocation(line: 13, column: 9, scope: !11)
!17 = !DILocation(line: 19, column: 26, scope: !10)
!18 = !DILocation(line: 22, column: 5, scope: !11)
!19 = !DILocation(line: 23, column: 1, scope: !11)
!20 = !DILocation(line: 12, column: 17, scope: !21)
!21 = distinct !DILexicalBlock(scope: !11, file: !2, line: 11, column: 5)
!22 = !DILocation(line: 14, column: 13, scope: !23)
!23 = distinct !DILexicalBlock(scope: !11, file: !2, line: 11, column: 5)
!24 = !DILocation(line: 15, column: 13, scope: !23)
