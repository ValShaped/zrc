---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn id(x: i32) -> i32 {\n    return x;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define i32 @id(i32 %0) !dbg !3 {
entry:
  %arg_x = alloca i32, align 4, !dbg !7
  store i32 %0, ptr %arg_x, align 4, !dbg !7
  %load = load i32, ptr %arg_x, align 4, !dbg !9
  ret i32 %load, !dbg !9
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "id", linkageName: "id", scope: null, file: !2, line: 1, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !6}
!6 = !DIBasicType(name: "i32")
!7 = !DILocation(line: 1, column: 22, scope: !8)
!8 = distinct !DILexicalBlock(scope: !3, file: !2, line: 1, column: 22)
!9 = !DILocation(line: 2, column: 12, scope: !10)
!10 = distinct !DILexicalBlock(scope: !8, file: !2, line: 1, column: 22)
