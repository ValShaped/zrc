---
source: compiler/zrc_codegen/src/expr.rs
description: "union U { x: i32, y: i8 }\n\nfn test() {\n    let x: U;\n\n    // TEST: the pointer is cast and then written to as an i32\n    x.x = 4;\n\n    // TEST: the pointer is cast and then written to as an i8\n    x.y = 5 as i8;\n\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define void @test() !dbg !3 {
entry:
  %let_x = alloca i32, align 4
  store i32 4, ptr %let_x, align 4, !dbg !8
  store i8 5, ptr %let_x, align 1, !dbg !11
  ret void, !dbg !12
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 3, type: !4, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{}
!8 = !DILocation(line: 7, column: 5, scope: !9)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 3, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 3, column: 1)
!11 = !DILocation(line: 10, column: 5, scope: !9)
!12 = !DILocation(line: 12, column: 5, scope: !9)

