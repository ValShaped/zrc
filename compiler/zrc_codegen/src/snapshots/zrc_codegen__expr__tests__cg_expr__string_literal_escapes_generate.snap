---
source: compiler/zrc_codegen/src/expr.rs
description: "fn test() {\n    // TEST: should properly generate \\xNN for each escape\n    let x = \"\\n\\r\\t\\\\\\\"\\x41\\0\";\n\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

@str = private unnamed_addr constant [7 x i8] c"\0A\0D\09\\\22)\00", align 1

define void @test() !dbg !3 {
entry:
  %let_x = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !8, metadata !DIExpression()), !dbg !13
  store ptr @str, ptr %let_x, align 8, !dbg !13
  ret void, !dbg !14
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 1, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{!8}
!8 = !DILocalVariable(name: "x", scope: !9, file: !2, line: 3, type: !11)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 1, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 1, column: 11)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "\22i8\22", baseType: !12, dwarfAddressSpace: 0)
!12 = !DIBasicType(name: "u8")
!13 = !DILocation(line: 3, column: 9, scope: !9)
!14 = !DILocation(line: 5, column: 5, scope: !9)

