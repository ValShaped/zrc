---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn test() {\n    // TEST: shadowing should work, each variable gets its own allocation\n    let x: i32 = 5;\n    let y: i32 = x + 1;  // uses first x (5)\n    let x: i32 = 10;     // shadows x\n    let z: i32 = x + 1;  // uses second x (10)\n}\n"
expression: resulting_ir
snapshot_kind: text
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define {} @test() !dbg !3 {
entry:
  %let_z = alloca i32, align 4
  %let_x1 = alloca i32, align 4
  %let_y = alloca i32, align 4
  %let_x = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !9, metadata !DIExpression()), !dbg !16
  store i32 5, ptr %let_x, align 4, !dbg !16
  call void @llvm.dbg.declare(metadata ptr %let_y, metadata !13, metadata !DIExpression()), !dbg !17
  %load = load i32, ptr %let_x, align 4, !dbg !18
  %add = add i32 %load, 1, !dbg !19
  store i32 %add, ptr %let_y, align 4, !dbg !17
  call void @llvm.dbg.declare(metadata ptr %let_x1, metadata !14, metadata !DIExpression()), !dbg !20
  store i32 10, ptr %let_x1, align 4, !dbg !20
  call void @llvm.dbg.declare(metadata ptr %let_z, metadata !15, metadata !DIExpression()), !dbg !21
  %load2 = load i32, ptr %let_x1, align 4, !dbg !22
  %add3 = add i32 %load2, 1, !dbg !23
  store i32 %add3, ptr %let_z, align 4, !dbg !21
  ret {} zeroinitializer, !dbg !24
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 1, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !8)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct {}", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !{!9, !13, !14, !15}
!9 = !DILocalVariable(name: "x", scope: !10, file: !2, line: 3, type: !12)
!10 = distinct !DILexicalBlock(scope: !11, file: !2, line: 1, column: 11)
!11 = distinct !DILexicalBlock(scope: !3, file: !2, line: 1, column: 11)
!12 = !DIBasicType(name: "i32")
!13 = !DILocalVariable(name: "y", scope: !10, file: !2, line: 4, type: !12)
!14 = !DILocalVariable(name: "x", scope: !10, file: !2, line: 5, type: !12)
!15 = !DILocalVariable(name: "z", scope: !10, file: !2, line: 6, type: !12)
!16 = !DILocation(line: 3, column: 9, scope: !10)
!17 = !DILocation(line: 4, column: 9, scope: !10)
!18 = !DILocation(line: 4, column: 18, scope: !10)
!19 = !DILocation(line: 4, column: 22, scope: !10)
!20 = !DILocation(line: 5, column: 9, scope: !10)
!21 = !DILocation(line: 6, column: 9, scope: !10)
!22 = !DILocation(line: 6, column: 18, scope: !10)
!23 = !DILocation(line: 6, column: 22, scope: !10)
!24 = !DILocation(line: 7, column: 1, scope: !10)
