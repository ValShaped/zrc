---
source: compiler/zrc_codegen/src/expr.rs
description: "fn get_bool() -> bool;\n\nfn test() {\n    let a = get_bool();\n    let b = get_bool();\n\n    // TEST: should create a bit AND\n    let and = a && b;\n\n    // TEST: should create a bit OR\n    let or = a || b;\n\n    // TEST: should create a bit NOT\n    let not = !a;\n\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare i1 @get_bool()

define void @test() !dbg !3 {
entry:
  %let_not = alloca i1, align 1
  %let_or = alloca i1, align 1
  %let_and = alloca i1, align 1
  %let_b = alloca i1, align 1
  %let_a = alloca i1, align 1
  %call = call i1 @get_bool(), !dbg !8
  store i1 %call, ptr %let_a, align 1, !dbg !11
  %call1 = call i1 @get_bool(), !dbg !12
  store i1 %call1, ptr %let_b, align 1, !dbg !13
  %load = load i1, ptr %let_a, align 1, !dbg !14
  %load2 = load i1, ptr %let_b, align 1, !dbg !15
  %and = and i1 %load, %load2, !dbg !15
  store i1 %and, ptr %let_and, align 1, !dbg !16
  %load3 = load i1, ptr %let_a, align 1, !dbg !17
  %load4 = load i1, ptr %let_b, align 1, !dbg !18
  %or = or i1 %load3, %load4, !dbg !18
  store i1 %or, ptr %let_or, align 1, !dbg !19
  %load5 = load i1, ptr %let_a, align 1, !dbg !20
  %not = xor i1 %load5, true, !dbg !20
  store i1 %not, ptr %let_not, align 1, !dbg !21
  ret void, !dbg !22
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 3, type: !4, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{}
!8 = !DILocation(line: 4, column: 13, scope: !9)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 3, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 3, column: 1)
!11 = !DILocation(line: 4, column: 9, scope: !9)
!12 = !DILocation(line: 5, column: 13, scope: !9)
!13 = !DILocation(line: 5, column: 9, scope: !9)
!14 = !DILocation(line: 8, column: 15, scope: !9)
!15 = !DILocation(line: 8, column: 20, scope: !9)
!16 = !DILocation(line: 8, column: 9, scope: !9)
!17 = !DILocation(line: 11, column: 14, scope: !9)
!18 = !DILocation(line: 11, column: 19, scope: !9)
!19 = !DILocation(line: 11, column: 9, scope: !9)
!20 = !DILocation(line: 14, column: 16, scope: !9)
!21 = !DILocation(line: 14, column: 9, scope: !9)
!22 = !DILocation(line: 16, column: 5, scope: !9)

