---
source: compiler/zrc_codegen/src/stmt.rs
description: "// TEST: self-referential struct types should compile to LLVM IR\n// with pointers to empty structs as placeholders\nstruct Node {\n    value: i32,\n    next: *Node\n}\n\nstruct TreeNode {\n    value: i32,\n    left: *TreeNode,\n    right: *TreeNode\n}\n\nfn create_node(val: i32) -> *Node {\n    let node: *Node;\n    return node;\n}\n\nfn main() -> i32 {\n    let head: *Node;\n    let tree: TreeNode;\n    head = create_node(42);\n\n    return 0;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define ptr @create_node(i32 %0) !dbg !3 {
entry:
  %let_node = alloca ptr, align 8, !dbg !8
  %arg_val = alloca i32, align 4, !dbg !8
  store i32 %0, ptr %arg_val, align 4, !dbg !8
  %load = load ptr, ptr %let_node, align 8, !dbg !10
  ret ptr %load, !dbg !10
}

define i32 @main() !dbg !12 {
entry:
  %let_tree = alloca { i32, ptr, ptr }, align 8
  %let_head = alloca ptr, align 8
  %call = call ptr @create_node(i32 42), !dbg !15
  store ptr %call, ptr %let_head, align 8, !dbg !18
  ret i32 0, !dbg !19
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "create_node", linkageName: "create_node", scope: null, file: !2, line: 14, type: !4, scopeLine: 14, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !7}
!6 = !DIBasicType(name: "struct { value: i32, next: *struct {} }")
!7 = !DIBasicType(name: "i32")
!8 = !DILocation(line: 14, column: 35, scope: !9)
!9 = distinct !DILexicalBlock(scope: !3, file: !2, line: 14, column: 35)
!10 = !DILocation(line: 16, column: 12, scope: !11)
!11 = distinct !DILexicalBlock(scope: !9, file: !2, line: 14, column: 35)
!12 = distinct !DISubprogram(name: "main", linkageName: "main", scope: null, file: !2, line: 19, type: !13, scopeLine: 19, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DISubroutineType(types: !14)
!14 = !{!7}
!15 = !DILocation(line: 22, column: 24, scope: !16)
!16 = distinct !DILexicalBlock(scope: !17, file: !2, line: 19, column: 18)
!17 = distinct !DILexicalBlock(scope: !12, file: !2, line: 19, column: 18)
!18 = !DILocation(line: 22, column: 5, scope: !16)
!19 = !DILocation(line: 24, column: 12, scope: !16)
