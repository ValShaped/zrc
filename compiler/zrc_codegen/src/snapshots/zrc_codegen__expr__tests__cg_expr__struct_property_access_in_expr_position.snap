---
source: compiler/zrc_codegen/src/expr.rs
description: "struct S { x: i32, y: i32 }\nfn take_int(x: i32);\n\nfn test() {\n    let x: S;\n\n    // TEST: should GEP into `x` to get the second property (`y`) and then\n    // load that value and call take_int\n    take_int(x.y);\n\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare void @take_int(i32)

define void @test() !dbg !3 {
entry:
  %let_x = alloca { i32, i32 }, align 8
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !8, metadata !DIExpression()), !dbg !16
  %gep = getelementptr inbounds { i32, i32 }, ptr %let_x, i32 0, i32 1, !dbg !17
  %load = load i32, ptr %gep, align 4, !dbg !17
  call void @take_int(i32 %load), !dbg !17
  ret void, !dbg !18
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 4, type: !4, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{!8}
!8 = !DILocalVariable(name: "x", scope: !9, file: !2, line: 5, type: !11)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 4, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 4, column: 11)
!11 = !DICompositeType(tag: DW_TAG_structure_type, name: "(struct { x: i32, y: i32 })", scope: !2, file: !2, elements: !12)
!12 = !{!13, !15}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !2, file: !2, baseType: !14)
!14 = !DIBasicType(name: "i32")
!15 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !2, file: !2, baseType: !14)
!16 = !DILocation(line: 5, column: 9, scope: !9)
!17 = !DILocation(line: 9, column: 14, scope: !9)
!18 = !DILocation(line: 11, column: 5, scope: !9)

