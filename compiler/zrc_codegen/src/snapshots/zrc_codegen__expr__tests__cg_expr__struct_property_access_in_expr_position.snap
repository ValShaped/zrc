---
source: compiler/zrc_codegen/src/expr.rs
description: "struct S { x: i32, y: i32 }\nfn take_int(x: i32);\n\nfn test() {\n    let x: S;\n\n    // TEST: should GEP into `x` to get the second property (`y`) and then\n    // load that value and call take_int\n    take_int(x.y);\n\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare void @take_int(i32)

define void @test() !dbg !3 {
entry:
  %let_x = alloca { i32, i32 }, align 8
  %gep = getelementptr inbounds { i32, i32 }, ptr %let_x, i32 0, i32 1
  %load = load i32, ptr %gep, align 4
  call void @take_int(i32 %load)
  ret void
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 4, type: !4, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{}

