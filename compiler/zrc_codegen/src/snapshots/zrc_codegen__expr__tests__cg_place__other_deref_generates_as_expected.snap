---
source: compiler/zrc_codegen/src/expr.rs
description: "fn test() {\n    // TEST: because cg_place returns a *pointer* to the represented value, handling\n    // *5 in a place context should return the address of *5, which is &*5 = 5.\n    // for this reason, we should literally be `store`ing to the hardcoded address\n    // 5, and never *loading* from it (because if we do load we may not be actually\n    // writing to that address)\n    // we use 5 not 0 because 0 is just 'ptr null'\n    *(5 as *i32) = 0;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define void @test() !dbg !3 {
entry:
  store i32 0, ptr inttoptr (i32 5 to ptr), align 4, !dbg !8
  ret void, !dbg !11
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 1, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{}
!8 = !DILocation(line: 8, column: 7, scope: !9)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 1, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 1, column: 11)
!11 = !DILocation(line: 9, column: 1, scope: !9)

