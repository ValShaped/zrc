---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn get_bool() -> bool;\nfn nop();\n\nfn test() {\n    // TEST: properly produces a conditional break over the call result and\n    // both code baths call nop().\n    if (get_bool()) nop();\n    else {\n        nop();\n        // TEST: this path diverges\n        return;\n    }\n\n    // TEST: code generation properly continues from the if_true block\n    nop();\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare i1 @get_bool()

declare void @nop()

define void @test() !dbg !3 {
entry:
  %call = call i1 @get_bool(), !dbg !8
  br i1 %call, label %then, label %then_else, !dbg !8

then:                                             ; preds = %entry
  call void @nop(), !dbg !11
  br label %end, !dbg !13

then_else:                                        ; preds = %entry
  call void @nop(), !dbg !15
  ret void, !dbg !13

end:                                              ; preds = %then
  call void @nop(), !dbg !16
  ret void, !dbg !17
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 4, type: !4, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{}
!8 = !DILocation(line: 7, column: 9, scope: !9)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 4, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 4, column: 11)
!11 = !DILocation(line: 7, column: 21, scope: !12)
!12 = distinct !DILexicalBlock(scope: !9, file: !2, line: 7, column: 21)
!13 = !DILocation(line: 11, column: 9, scope: !14)
!14 = distinct !DILexicalBlock(scope: !9, file: !2, line: 8, column: 10)
!15 = !DILocation(line: 9, column: 9, scope: !14)
!16 = !DILocation(line: 15, column: 5, scope: !9)
!17 = !DILocation(line: 16, column: 5, scope: !9)

