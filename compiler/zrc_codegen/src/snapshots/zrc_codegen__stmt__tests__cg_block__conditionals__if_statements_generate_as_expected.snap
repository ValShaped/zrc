---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn get_bool() -> bool;\nfn nop();\n\nfn test() {\n    // TEST: properly produces a conditional break over the call result and\n    // both code paths join at the end\n    if (get_bool()) nop();\n\n    // TEST: code generation properly continues in the last block\n    nop();\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare i1 @get_bool()

declare void @nop()

define void @test() {
entry:
  %call = call i1 @get_bool()
  br i1 %call, label %then, label %then_else

then:                                             ; preds = %entry
  call void @nop()
  br label %end

then_else:                                        ; preds = %entry
  br label %end

end:                                              ; preds = %then_else, %then
  call void @nop()
  ret void
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "--fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")

