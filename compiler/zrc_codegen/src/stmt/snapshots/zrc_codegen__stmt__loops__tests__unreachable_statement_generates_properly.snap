---
source: compiler/zrc_codegen/src/stmt/loops.rs
description: "fn test(cond: bool) {\n    let x = 7;\n    if (x == 6) unreachable;\n    else return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define {} @test(i1 %0) !dbg !3 {
entry:
  %let_x = alloca i32, align 4, !dbg !9
  %arg_cond = alloca i1, align 1, !dbg !9
  store i1 %0, ptr %arg_cond, align 1, !dbg !9
  store i32 7, ptr %let_x, align 4, !dbg !11
  %load = load i32, ptr %let_x, align 4, !dbg !13
  %cmp = icmp eq i32 %load, 6, !dbg !14
  br i1 %cmp, label %then, label %then_else, !dbg !14

then:                                             ; preds = %entry
  unreachable, !dbg !15

then_else:                                        ; preds = %entry
  ret {} zeroinitializer, !dbg !17
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 1, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !8}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct {}", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !DIBasicType(name: "bool")
!9 = !DILocation(line: 1, column: 21, scope: !10)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 1, column: 21)
!11 = !DILocation(line: 2, column: 9, scope: !12)
!12 = distinct !DILexicalBlock(scope: !10, file: !2, line: 1, column: 21)
!13 = !DILocation(line: 3, column: 9, scope: !12)
!14 = !DILocation(line: 3, column: 14, scope: !12)
!15 = !DILocation(line: 3, column: 17, scope: !16)
!16 = distinct !DILexicalBlock(scope: !12, file: !2, line: 3, column: 17)
!17 = !DILocation(line: 4, column: 10, scope: !18)
!18 = distinct !DILexicalBlock(scope: !12, file: !2, line: 4, column: 10)
