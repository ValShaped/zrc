use crate::ast::*;
use crate::{lexer, box_arguments, into_expr_type};
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, lexer::Tok, lexer::LexicalError>>);

pub Expr: Expr = {
    <Comma> => Expr::from(<>)
};

pub Comma: Comma = {
    <Comma> "," <Assignment> => box_arguments!(Comma::Comma, <>),
    <Assignment> => into_expr_type!(Comma, <>)
}

Assignment: Assignment = {
    <Unary> "=" <Assignment> => box_arguments!(Assignment::Assignment, <>),
    <Unary> "+=" <Assignment> => box_arguments!(Assignment::AdditionAssignment, <>),
    <Unary> "-=" <Assignment> => box_arguments!(Assignment::SubtractionAssignment, <>),
    <Unary> "*=" <Assignment> => box_arguments!(Assignment::MultiplicationAssignment, <>),
    <Unary> "/=" <Assignment> => box_arguments!(Assignment::DivisionAssignment, <>),
    <Unary> "%=" <Assignment> => box_arguments!(Assignment::ModuloAssignment, <>),
    <Unary> "&=" <Assignment> => box_arguments!(Assignment::BitwiseAndAssignment, <>),
    <Unary> "|=" <Assignment> => box_arguments!(Assignment::BitwiseOrAssignment, <>),
    <Unary> "^=" <Assignment> => box_arguments!(Assignment::BitwiseXorAssignment, <>),
    <Unary> "<<=" <Assignment> => box_arguments!(Assignment::BitwiseLeftShiftAssignment, <>),
    <Unary> ">>=" <Assignment> => box_arguments!(Assignment::BitwiseRightShiftAssignment, <>),
    <Ternary> => into_expr_type!(Assignment, <>)
};

Unary: Unary = {
    "!" <Unary> => box_arguments!(Unary::UnaryNot, <>),
    "-" <Unary> => box_arguments!(Unary::UnaryMinus, <>),
    "~" <Unary> => box_arguments!(Unary::UnaryBitwiseNot, <>),
    "++" <Unary> => box_arguments!(Unary::PreIncrement, <>),
    "--" <Unary> => box_arguments!(Unary::PreDecrement, <>),
    <Postfix> => into_expr_type!(Unary, <>)
};

Postfix: Postfix = {
    <Postfix> "[" <Expr> "]" => box_arguments!(Postfix::Index, <>),
    <l:Postfix> "." <r:IDENTIFIER> => box_arguments!(Postfix::Dot, l, IDENTIFIER::Identifier(r)),
    <l:Postfix> "::" <r:IDENTIFIER> => box_arguments!(Postfix::NamespaceAccess, l, IDENTIFIER::Identifier(r)),
    <Postfix> "++" => box_arguments!(Postfix::PostIncrement, <>),
    <Postfix> "--" => box_arguments!(Postfix::PostDecrement, <>),
    <i:Postfix> "(" <l:ArgumentList> ")" => Postfix::Call(Box::new(i), l),
    <Postfix> "(" ")" => Postfix::Call(Box::new(<>), vec![]),
    <Primary> => into_expr_type!(Postfix, <>)
};

ArgumentList: Vec<Assignment> = {
    <left:ArgumentList> "," <right:Assignment> => {
        let mut new = left.clone();
        new.push(right);
        new
    },
    <Assignment> => vec![<>]
};

Ternary: Ternary = {
    <Logical> "?" <Expr> ":" <Ternary> => box_arguments!(Ternary::Ternary, <>),
    <Logical> => into_expr_type!(Ternary, <>)
};

Logical: Logical = {
    <Logical> "&&" <Equality> => box_arguments!(Logical::LogicalAnd, <>),
    <Logical> "||" <Equality> => box_arguments!(Logical::LogicalOr, <>),
    <Equality> => into_expr_type!(Logical, <>)
};

Equality: Equality = {
    <Equality> "==" <Bitwise> => box_arguments!(Equality::Equals, <>),
    <Equality> "!=" <Bitwise> => box_arguments!(Equality::NotEquals, <>),
    <Comparison> => into_expr_type!(Equality, <>)
};

Bitwise: Bitwise = {
    <Bitwise> "&" <Comparison> => box_arguments!(Bitwise::BitwiseAnd, <>),
    <Bitwise> "|" <Comparison> => box_arguments!(Bitwise::BitwiseOr, <>),
    <Bitwise> "^" <Comparison> => box_arguments!(Bitwise::BitwiseXor, <>),
    <Comparison> => into_expr_type!(Bitwise, <>)
};

Comparison: Comparison = {
    <Comparison> ">" <BitShift> => box_arguments!(Comparison::GreaterThan, <>),
    <Comparison> ">=" <BitShift> => box_arguments!(Comparison::GreaterThanOrEqualTo, <>),
    <Comparison> "<" <BitShift> => box_arguments!(Comparison::LessThan, <>),
    <Comparison> "<=" <BitShift> => box_arguments!(Comparison::LessThanOrEqualTo, <>),
    <Term> => into_expr_type!(Comparison, <>)
};

BitShift: Shift = {
    <BitShift> ">>" <Term> => box_arguments!(Shift::BitwiseRightShift, <>),
    <BitShift> "<<" <Term> => box_arguments!(Shift::BitwiseLeftShift, <>),
    <Term> => into_expr_type!(Shift, <>)
};

Term: Term = {
    <Term> "+" <Factor> => box_arguments!(Term::Addition, <>),
    <Term> "-" <Factor> => box_arguments!(Term::Subtraction, <>),
    <Factor> => into_expr_type!(Term, <>)
};

Factor: Factor = {
    <Factor> "/" <Unary> => box_arguments!(Factor::Division, <>),
    <Factor> "*" <Unary> => box_arguments!(Factor::Multiplication, <>),
    <Factor> "%" <Unary> => box_arguments!(Factor::Modulo, <>),
    <Unary> => into_expr_type!(Factor, <>)
};

Primary: Primary = {
    NUMBER => Primary::NumberLiteral(<>),
    STRING => Primary::StringLiteral(<>),
    IDENTIFIER => Primary::Identifier(<>),
    "true" => Primary::BooleanLiteral(true),
    "false" => Primary::BooleanLiteral(false),
    "(" <Expr> ")" => box_arguments!(Primary::Parenthesized, <>),
    ! => { errors.push(<>); Primary::Error }
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Star,
        "/" => lexer::Tok::Slash,
        "%" => lexer::Tok::Percent,
        "++" => lexer::Tok::PlusPlus,
        "--" => lexer::Tok::MinusMinus,

        "==" => lexer::Tok::EqEq,
        "!=" => lexer::Tok::NotEq,
        ">" => lexer::Tok::Greater,
        ">=" => lexer::Tok::GreaterEq,
        "<" => lexer::Tok::Less,
        "<=" => lexer::Tok::LessEq,

        "&&" => lexer::Tok::LogicalAnd,
        "||" => lexer::Tok::LogicalOr,
        "!" => lexer::Tok::LogicalNot,

        "&" => lexer::Tok::BitwiseAnd,
        "|" => lexer::Tok::BitwiseOr,
        "^" => lexer::Tok::BitwiseXor,
        "~" => lexer::Tok::BitwiseNot,
        "<<" => lexer::Tok::BitwiseLeftShift,
        ">>" => lexer::Tok::BitwiseRightShift,

        "=" => lexer::Tok::Assign,
        "+=" => lexer::Tok::PlusAssign,
        "-=" => lexer::Tok::MinusAssign,
        "*=" => lexer::Tok::StarAssign,
        "/=" => lexer::Tok::SlashAssign,
        "%=" => lexer::Tok::PercentAssign,
        "&=" => lexer::Tok::BitwiseAndAssign,
        "|=" => lexer::Tok::BitwiseOrAssign,
        "^=" => lexer::Tok::BitwiseXorAssign,
        "<<=" => lexer::Tok::BitwiseLeftShiftAssign,
        ">>=" => lexer::Tok::BitwiseRightShiftAssign,

        ";" => lexer::Tok::Semicolon,
        "," => lexer::Tok::Comma,
        "." => lexer::Tok::Dot,
        "?" => lexer::Tok::QuestionMark,
        ":" => lexer::Tok::Colon,
        "::" => lexer::Tok::ColonColon,

        "(" => lexer::Tok::LeftParen,
        ")" => lexer::Tok::RightParen,
        "{" => lexer::Tok::LeftBrace,
        "}" => lexer::Tok::RightBrace,
        "[" => lexer::Tok::LeftBracket,
        "]" => lexer::Tok::RightBracket,

        STRING => lexer::Tok::StringLiteral(<String>),
        NUMBER => lexer::Tok::NumberLiteral(<String>),
        IDENTIFIER => lexer::Tok::Identifier(<String>),

        "true" => lexer::Tok::True,
        "false" => lexer::Tok::False,
    }
}